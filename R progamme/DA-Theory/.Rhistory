fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='group')
fig_bar
### Stacked Bar Chart ###
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='stack')
fig_bar
### Scatter Plot ###
fig <- plot_ly(data = TotalDeathsandCasesStates,x = ~TotalCases,y= ~TotalDeaths ,list(size = 10,color ="rgba(255,26,30,0.7)"))
fig <- fig %>%layout(title = "Total Cases vs Total States",yaxis = list(zeroline = FALSE),xaxis =
list(zeroline = FALSE))
ggplot(data = TotalDeathsandCasesStates,
mapping = aes(x = TotalCases, y = TotalDeaths,size = TotalCases,color = TotalDeaths)) +
geom_point(alpha = .7) +
geom_smooth(method = "lm")
### Scatter Plot ###
# This tells us information regarding total deaths and total cases
ggplot(data = TotalDeathsandCasesStates,
mapping = aes(x = TotalCases, y = TotalDeaths,size = TotalCases,color = TotalDeaths)) +
geom_point(alpha = .7) +
geom_smooth(method = "lm")
### Data containing total cases on each date ###
newdata <- group_by(dataset, date)
DeathsdateSum <- summarize(newdata,TotalDeaths = sum(deaths, na.rm=TRUE))
DeathsdateSum
### Time Series ###
fig <- plot_ly(DeathsdateSum, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~TotalDeaths)%>%
layout(showlegend = F)
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
## Shows average density of deaths each day ##
ggplot(DeathsdateSum,
aes(x = TotalDeaths)) +
geom_density(alpha = 0.4,fill = "Cornflowerblue") +
labs(title = "Deaths distribution according to dates")
### Data containing total Cases on each date ###
newdata <- group_by(dataset, date)
CasesdateSum <- summarize(newdata,TotalCases = sum(cases, na.rm=TRUE))
CasesdateSum
### Time Series ###
fig <- plot_ly(CasesdateSum, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~TotalCases)%>%
layout(showlegend = F)
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
## Shows average density of deaths each day ##
ggplot(CasesdateSum,
aes(x = TotalCases)) +
geom_density(alpha = 0.4,fill = "Cornflowerblue") +
labs(title = "Cases each day frequency")
### As there are many states hence reducing the numbers via considering states whose contribution is lesser than 3.5% as others
TotalDeathsandCasesStates
## Data containing all the states having contribution of cases to the whole greater than 2% ##
newdata <- select(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) > 0.02),state,TotalDeaths)
## Data containing all the states having contribution of cases to the whole greater than 2% ##
sumOTHERdeaths = sum(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) <= 0.02)$TotalDeaths)
newdata[nrow(newdata) + 1,] <- c("Others",sumOTHERdeaths)
newdata
### Piechart ###
piechart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalDeaths,type = 'pie')
piechart
### As there are many states hence reducing the numbers via considering states whose contribution is lesser than 3.5% as others
TotalDeathsandCasesStates
## Data containing all the states having contribution of cases to the whole greater than 2% ##
newdata <- select(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) > 0.02),state,TotalDeaths)
## Data containing all the states having contribution of cases to the whole greater than 2% ##
sumOTHERdeaths = sum(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) <= 0.02)$TotalDeaths)
newdata[nrow(newdata) + 1,] <- c("Others",sumOTHERdeaths)
newdata
### Piechart ###
piechart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalDeaths,type = 'pie')
piechart
### Donut Chart ###
DonutChart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalCases,type = 'pie',hole = 0.5)
DonutChart
### Donut Chart ###
### As there are many states hence reducing the numbers via considering states whose contribution is lesser than 3.5% as others
TotalDeathsandCasesStates
## Data containing all the states having contribution of cases to the whole greater than 2% ##
newdata <- select(filter(TotalDeathsandCasesStates,TotalCases/sum(TotalCases) > 0.02),state,TotalCases)
## Data containing all the states having contribution of cases to the whole greater than 2% ##
sumOTHERTotalCases = sum(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) <= 0.02)$TotalCases)
newdata[nrow(newdata) + 1,] <- c("Others",sumOTHERCases)
### Donut Chart ###
### As there are many states hence reducing the numbers via considering states whose contribution is lesser than 3.5% as others
TotalDeathsandCasesStates
## Data containing all the states having contribution of cases to the whole greater than 2% ##
newdata <- select(filter(TotalDeathsandCasesStates,TotalCases/sum(TotalCases) > 0.02),state,TotalCases)
## Data containing all the states having contribution of cases to the whole greater than 2% ##
sumOTHERCases = sum(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) <= 0.02)$TotalCases)
newdata[nrow(newdata) + 1,] <- c("Others",sumOTHERCases)
newdata
DonutChart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalCases,type = 'pie',hole = 0.5)
DonutChart
hist<plot_ly(dataset,x=state,type="histogram",marker=list(color="yellow"))%>%layou
hist<plot_ly(dataset,x=state,type="histogram",marker=list(color="yellow"))%>%layout(title="Histogram for Data collected by state")
hist<plot_ly(dataset,x=~state,type="histogram",marker=list(color="yellow"))%>%layout(title="Histogram for Data collected by state")
hist<plot_ly(dataset,x=~deaths,type="histogram",marker=list(color="yellow"))%>%layout(title="Histogram for Data collected by state")
hist<-plot_ly(dataset,x=~deaths,type="histogram",marker=list(color="yellow"))%>%layout(title="Histogram for Data collected by state")
hist<-plot_ly(dataset,x=~deaths,type="histogram",marker=list(color="yellow"))%>%layout(title="Histogram for Data collected by state")
hist
### Stacked Bar Chart ###
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='stack')
fig_bar
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
## As the Number of cases are far more than deaths hence dividing it by 40
newdata<-mutate(TotalDeathsandCasesStates,TotalCases = TotalCases/20)
### Grouped Bar chart ###
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='group')
fig_bar
### Stacked Bar Chart ###
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='stack')
fig_bar
ggplot(data = TotalDeathsandCasesStates,
mapping = aes(x = TotalCases, y = TotalDeaths,size = TotalCases,color = TotalDeaths)) +
geom_smooth(method = "lm")
### Scatter Plot ###
# This tells us information regarding total deaths and total cases
ggplot(data = TotalDeathsandCasesStates,
mapping = aes(x = TotalCases, y = TotalDeaths,size = TotalCases,color = TotalDeaths)) +
geom_point(alpha = .7)
library(plotly)
x <- c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')
y1 <- c(20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17)/10
y2 <- c(19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16)
data <- data.frame(x, y1, y2)
#The default order will be alphabetized unless specified as below:
data$x <- factor(data$x, levels = data[["x"]])
p <- plot_ly(data, x = ~x, y = ~y1, type = 'bar', name = 'Primary Product', marker = list(color = 'rgb(49,130,189)')) %>%
add_trace(y = ~y2, name = 'Secondary Product', marker = list(color = 'rgb(204,204,204)')) %>%
layout(xaxis = list(title = "", tickangle = -45),
yaxis = list(title = ""),
margin = list(b = 100),
barmode = 'group')
p
x <- c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')
y_1 <- c(20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17)/10
y_2 <- c(19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16)
data <- data.frame(x, y_1, y_2)
#The default order will be alphabetized unless specified as below:
data$x <- factor(data$x, levels = data[["x"]])
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis"
)
p <- plot_ly(data, x = ~x, y = ~y_1, type = 'bar', name = 'Primary Product', marker = list(color = 'rgb(49,130,189)')) %>%
add_trace(y = ~y_2, name = 'Secondary Product', marker = list(color = 'rgb(204,204,204)'), axis = "y2") %>%
layout(yaxis2 = ay,
xaxis = list(title = "", tickangle = -45),
yaxis = list(title = ""),
margin = list(b = 100),
barmode = 'group')
p
# Start with a usual ggplot2 call:
ggplot(newdata, aes(x=state, y=TotalCases)) +
# Custom the Y scales:
scale_y_continuous(
# Features of the first axis
name = "First Axis",
# Add a second axis and specify its features
sec.axis = sec_axis( trans=~.*20, name="Second Axis")
) +
theme_ipsum()
# Start with a usual ggplot2 call:
ggplot(newdata, aes(x=state, y=TotalCases)) +
# Custom the Y scales:
scale_y_continuous(
# Features of the first axis
name = "First Axis",
# Add a second axis and specify its features
sec.axis = sec_axis( trans=~.*20, name="Second Axis")
) +
# Start with a usual ggplot2 call:
ggplot(newdata, aes(x=state, y=TotalCases)) +
# Custom the Y scales:
scale_y_continuous(
# Features of the first axis
name = "First Axis",
# Add a second axis and specify its features
sec.axis = sec_axis( trans=~.*20, name="Second Axis")
)
### Donut Chart ###
### This tells total number of Cases from each state ###
### As there are many states hence reducing the numbers via considering states whose contribution is lesser than 2% as others
TotalDeathsandCasesStates
## Data containing all the states having contribution of cases to the whole greater than 2% ##
newdata <- select(filter(TotalDeathsandCasesStates,TotalCases/sum(TotalCases) > 0.02),state,TotalCases)
## Data containing all the states having contribution of cases to the whole greater than 2% ##
sumOTHERCases = sum(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) <= 0.02)$TotalCases)
newdata[nrow(newdata) + 1,] <- c("Others",sumOTHERCases)
newdata
DonutChart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalCases,type = 'pie',hole = 0.5)
DonutChart
# Start with a usual ggplot2 call:
ggplot(newdata, aes(x=state, y=TotalCases)) +
# Custom the Y scales:
scale_y_continuous(
# Features of the first axis
name = "First Axis",
# Add a second axis and specify its features
sec.axis = sec_axis( trans=~.*20, name="Second Axis")
) +coord_flip()
# Start with a usual ggplot2 call:
ggplot(newdata, aes(x=state, y=TotalCases)) +
# Custom the Y scales:
scale_y_continuous(
# Features of the first axis
name = "First Axis",
# Add a second axis and specify its features
sec.axis = sec_axis( trans=~.*20, name="Second Axis")
) +
theme(axis.text.x = element_text(angle = 90,
hjust = 1))
# Start with a usual ggplot2 call:
ggplot(newdata, aes(x=state, y=TotalCases)) +
# Custom the Y scales:
scale_y_continuous(
# Features of the first axis
name = "First Axis",
# Add a second axis and specify its features
sec.axis = sec_axis( trans=~.*20, name="Second Axis")
)
# Start with a usual ggplot2 call:
ggplot(newdata, aes(x=state, y=TotalCases)) +
# Custom the Y scales:
scale_y_continuous(
# Features of the first axis
name = "First Axis",
# Add a second axis and specify its features
sec.axis = sec_axis( trans=~.*20, name="Second Axis")
)
library(dplyr)
library(readr)
library(plotly)
library(ggplot2)
# Dataset COVID --> https://www.kaggle.com/datasets/sudalairajkumar/covid19-in-usa
setwd("C:/Users/saksh/OneDrive/Desktop/R progamme/DA-Theory")
dataset <-read.csv("us_counties_covid19_daily.csv")
str(dataset)
View(dataset)
## Getting to know more about categorical data ##
length(unique(dataset$county))
length(unique(dataset$date))
length(unique(dataset$state))
## Knowing number of empty cells in each column ###
for(i in names(dataset))
{
print(c(i,sum(is.na(dataset[[i]]))))
}
## Removing rows with empty columns ##
dataset <- na.omit(dataset)
### Length of dataset after reoving some rows with empty space ###
nrow(dataset)
newdata <- group_by(dataset, state)
DeathsStates <- summarize(newdata,TotalDeaths = sum(deaths, na.rm=TRUE))
DeathsStates
newdata <- group_by(dataset, state)
CasesStates <- summarize(newdata,TotalCases = sum(cases, na.rm=TRUE))
View(CasesStates)
CasesStates
TotalDeathsandCasesStates <- merge(CasesStates,DeathsStates)
TotalDeathsandCasesStates
View(TotalDeathsandCasesStates)
### Interactive Barchart ###
fig <- plot_ly(data = DeathsStates,type = "bar",x = ~state,y = ~TotalDeaths,marker = list(color = 'red'))
fig <- fig %>% layout(title = "State vs TotalDeaths")
fig
## This tells regarding Total Deaths in each state
### Stacked Bar Chart ###
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='stack')
fig_bar
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
## As the Number of cases are far more than deaths hence dividing it by 40
newdata<-mutate(TotalDeathsandCasesStates,TotalCases = TotalCases/20)
### Grouped Bar chart ###
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='group')
fig_bar
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
## As the Number of cases are far more than deaths hence dividing it by 40
newdata<-mutate(TotalDeathsandCasesStates,TotalCases = TotalCases/20)
### Grouped Bar chart ###
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "<b>secondary</b> yaxis title")
fig_bar <- fig_bar%>%layout(barmode='group',yaxis2 = ay)
fig_bar
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
## As the Number of cases are far more than deaths hence dividing it by 40
newdata<-mutate(TotalDeathsandCasesStates,TotalCases = TotalCases/20)
### Grouped Bar chart ###
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "<b>secondary</b> yaxis title")
fig_bar <- fig_bar%>%layout(barmode='group', yaxis2 = ay)
fig_bar
### Stacked Bar Chart ###
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='stack')
fig_bar
ggplot(data = TotalDeathsandCasesStates,
mapping = aes(x = TotalCases, y = TotalDeaths,size = TotalCases,color = TotalDeaths)) +
geom_smooth(method = "lm")
### Scatter Plot ###
# This tells us information regarding total deaths and total cases
ggplot(data = TotalDeathsandCasesStates,
mapping = aes(x = TotalCases, y = TotalDeaths,size = TotalCases,color = TotalDeaths)) +
geom_point(alpha = .7)
### Data containing total cases on each date ###
newdata <- group_by(dataset, date)
DeathsdateSum <- summarize(newdata,TotalDeaths = sum(deaths, na.rm=TRUE))
DeathsdateSum
### Time Series ###
fig <- plot_ly(DeathsdateSum, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~TotalDeaths)%>%
layout(showlegend = F)
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
## Shows average density of deaths each day ##
ggplot(DeathsdateSum,
aes(x = TotalDeaths)) +
geom_density(alpha = 0.4,fill = "Cornflowerblue") +
labs(title = "Deaths distribution according to dates")
### Data containing total Cases on each date ###
newdata <- group_by(dataset, date)
CasesdateSum <- summarize(newdata,TotalCases = sum(cases, na.rm=TRUE))
CasesdateSum
### Time Series ###
fig <- plot_ly(CasesdateSum, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~TotalCases)%>%
layout(showlegend = F)
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
## Shows average density of deaths each day ##
ggplot(CasesdateSum,
aes(x = TotalCases)) +
geom_density(alpha = 0.4,fill = "Cornflowerblue") +
labs(title = "Cases each day frequency")
### This tells total number of Deaths from each state ###
### As there are many states hence reducing the numbers via considering states whose contribution is lesser than 2% as others
TotalDeathsandCasesStates
## Data containing all the states having contribution of cases to the whole greater than 2% ##
newdata <- select(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) > 0.02),state,TotalDeaths)
## Data containing all the states having contribution of cases to the whole greater than 2% ##
sumOTHERdeaths = sum(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) <= 0.02)$TotalDeaths)
newdata[nrow(newdata) + 1,] <- c("Others",sumOTHERdeaths)
newdata
### Piechart ###
piechart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalDeaths,type = 'pie')
piechart
### Donut Chart ###
### This tells total number of Cases from each state ###
### As there are many states hence reducing the numbers via considering states whose contribution is lesser than 2% as others
TotalDeathsandCasesStates
## Data containing all the states having contribution of cases to the whole greater than 2% ##
newdata <- select(filter(TotalDeathsandCasesStates,TotalCases/sum(TotalCases) > 0.02),state,TotalCases)
## Data containing all the states having contribution of cases to the whole greater than 2% ##
sumOTHERCases = sum(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) <= 0.02)$TotalCases)
newdata[nrow(newdata) + 1,] <- c("Others",sumOTHERCases)
newdata
DonutChart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalCases,type = 'pie',hole = 0.5)
DonutChart
### Piechart ###
piechart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalCases,type = 'pie')
piechart
### Donut Chart ###
### This tells total number of Cases from each state ###
### As there are many states hence reducing the numbers via considering states whose contribution is lesser than 2% as others
TotalDeathsandCasesStates
## Data containing all the states having contribution of cases to the whole greater than 2% ##
newdata <- select(filter(TotalDeathsandCasesStates,TotalCases/sum(TotalCases) > 0.02),state,TotalCases)
## Data containing all the states having contribution of cases to the whole greater than 2% ##
sumOTHERCases = sum(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) <= 0.02)$TotalCases)
newdata[nrow(newdata) + 1,] <- c("Others",sumOTHERCases)
newdata
DonutChart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalCases,type = 'pie',hole = 0.5)
DonutChart
PieChart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalCases,type = 'pie')
PieChart
PieChart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalDeaths,type = 'pie')
PieChart
piechart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalDeaths,type = 'pie',hole = 0.5)
PieChart
### This tells total number of Deaths from each state ###
### As there are many states hence reducing the numbers via considering states whose contribution is lesser than 2% as others
TotalDeathsandCasesStates
## Data containing all the states having contribution of cases to the whole greater than 2% ##
newdata <- select(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) > 0.02),state,TotalDeaths)
## Data containing all the states having contribution of cases to the whole greater than 2% ##
sumOTHERdeaths = sum(filter(TotalDeathsandCasesStates,TotalDeaths/sum(TotalDeaths) <= 0.02)$TotalDeaths)
newdata[nrow(newdata) + 1,] <- c("Others",sumOTHERdeaths)
newdata
### Piechart ###
piechart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalDeaths,type = 'pie')
piechart
piechart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalDeaths,type = 'pie',hole = 0.5)
PieChart
pieChart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalDeaths,type = 'pie',hole = 0.5)
PieChart
DonutChart <- plot_ly(newdata) %>%add_pie(newdata, labels = ~state, values = ~TotalDeaths,type = 'pie',hole = 0.5)
DonutChart
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
## As the Number of cases are far more than deaths hence dividing it by 20
newdata<-mutate(TotalDeathsandCasesStates,TotalCases = TotalCases/20)
### Grouped Bar chart ###
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='group',annotations = list(
list(text = "Numbercases is divided via 2")))
fig_bar
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
## As the Number of cases are far more than deaths hence dividing it by 20
newdata<-mutate(TotalDeathsandCasesStates,TotalCases = TotalCases/20)
### Grouped Bar chart ###
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='group',annotations = list(
list(text = "Number of cases is divided via 2")))
fig_bar
### Stacked Bar Chart ###
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='stack',annotations = list(
list(text = "Number of cases is divided via 20"))
fig_bar
View(PieChart)
### Stacked Bar Chart ###
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='stack',annotations = list(text = "Number of cases is divided via 20"))
fig_bar
## This give side by side by side information regarding 2 important topics i.e Cases Tot and Death tot according to the state which will help to know out of the effected cases how many are dieing and how many are recovering
## As the Number of cases are far more than deaths hence dividing it by 20
newdata<-mutate(TotalDeathsandCasesStates,TotalCases = TotalCases/20)
### Grouped Bar chart ###
fig_bar <- plot_ly(data=newdata,type="bar",x=~state,y=~TotalCases,name="CasesTot")
fig_bar <- fig_bar%>% add_trace(y=~TotalDeaths,name="DeathsTot")
fig_bar <- fig_bar%>%layout(barmode='group',annotations = list(
list(text = "Number of cases is divided via 20")))
fig_bar
ZomatoData <- read.csv("zomato.csv")
View(ZomatoData)
### Maps ###
ggplot() +
geom_polygon(data = ZomatoData, aes(fill = Votes, x = Longitude, y = Latitude, group = group)) +
theme_void() +
coord_map()
### Maps ###
ggplot() +
geom_polygon(data = ZomatoData, aes(fill = Votes, x = Longitude, y = Latitude)) +
theme_void() +
coord_map()
